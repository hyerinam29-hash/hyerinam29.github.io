name: Generate Posts JSON

on:
  push:
    branches:
      - main
    paths:
      - 'pages/**/*.md'
  workflow_dispatch:

permissions:
  contents: write

jobs:
  generate-posts-json:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Generate posts.json
        run: |
          node << 'SCRIPT'
          const fs = require('fs');
          const path = require('path');
          
          console.log('Generating posts.json from pages folder...');
          
          const pagesDir = 'pages';
          const posts = [];
          
          // pages 폴더의 모든 .md 파일 읽기
          const files = fs.readdirSync(pagesDir).filter(f => f.endsWith('.md'));
          
          files.forEach(file => {
            const filePath = path.join(pagesDir, file);
            const content = fs.readFileSync(filePath, 'utf8');
            
            // Front Matter 추출
            const frontMatterMatch = content.match(/^---\s*\n([\s\S]*?)\n---/);
            if (!frontMatterMatch) {
              console.log(`Skipping ${file}: No front matter found`);
              return;
            }
            
            const frontMatter = frontMatterMatch[1];
            const slug = path.basename(file, '.md');
            
            // 각 필드 파싱
            const titleMatch = frontMatter.match(/^title:\s*['"]?(.+?)['"]?\s*$/m);
            const dateMatch = frontMatter.match(/^date:\s*(.+?)\s*$/m);
            const categoryMatch = frontMatter.match(/^category:\s*['"]?(.+?)['"]?\s*$/m);
            const descriptionMatch = frontMatter.match(/^description:\s*['"]?(.+?)['"]?\s*$/m);
            const tagsMatch = frontMatter.match(/^tags:\s*(\[.+?\])\s*$/m);
            
            const post = {
              slug: slug,
              title: titleMatch ? titleMatch[1] : '',
              date: dateMatch ? dateMatch[1] : '',
              category: categoryMatch ? categoryMatch[1] : '',
              description: descriptionMatch ? descriptionMatch[1] : '',
              tags: tagsMatch ? JSON.parse(tagsMatch[1]) : []
            };
            
            posts.push(post);
            console.log(`Processed: ${file} (slug: ${slug})`);
          });
          
          // 날짜순 정렬 (최신순)
          posts.sort((a, b) => new Date(b.date) - new Date(a.date));
          
          // posts.json 생성
          fs.writeFileSync('posts.json', JSON.stringify(posts, null, 2));
          console.log('posts.json generated successfully!');
          console.log(JSON.stringify(posts, null, 2));
          SCRIPT

      - name: Commit and push posts.json
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          
          # posts.json이 변경되었는지 확인
          if git diff --quiet posts.json; then
            echo "No changes to posts.json"
          else
            git add posts.json
            git commit -m "chore: Update posts.json [skip ci]"
            git push
            echo "posts.json updated and pushed"
          fi

